/// The input to EdaTool's LVS interface.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LvsInput {
    /// The file system path where the netlist is saved.
    /// Should be an absolute path.
    #[prost(string, tag="1")]
    pub netlist_path: ::prost::alloc::string::String,
    /// The file system path where the layout is saved.
    /// Should be an absolute path.
    #[prost(string, tag="2")]
    pub layout_path: ::prost::alloc::string::String,
    /// The name of the cell in the netlist that should
    /// be compared.
    #[prost(string, tag="3")]
    pub netlist_cell: ::prost::alloc::string::String,
    /// The name of the cell in the layout that should
    /// be compared.
    #[prost(string, tag="4")]
    pub layout_cell: ::prost::alloc::string::String,
    /// The tool to use to perform LVS.
    #[prost(enumeration="LvsTool", tag="5")]
    pub tool: i32,
    /// The name of the technology to use.
    /// For Skywater 130nm, use "sky130".
    #[prost(string, tag="6")]
    pub tech: ::prost::alloc::string::String,
    /// Additional unstructured options to pass to the LVS tool.
    /// Not directly used by EdaTool.
    #[prost(map="string, string", tag="10")]
    pub options: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// The result of an LVS comparison.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LvsOutput {
    /// Indicates whether the netlist and the layout match.
    /// If the netlist and layout match, no errors should be generated.
    #[prost(bool, tag="1")]
    pub matches: bool,
    /// A list of errors generated by the LVS tool.
    /// If the netlist and layout match, no errors should be generated.
    #[prost(message, repeated, tag="2")]
    pub errors: ::prost::alloc::vec::Vec<LvsError>,
    /// A list of warnings generated by the LVS tool.
    #[prost(message, repeated, tag="3")]
    pub warnings: ::prost::alloc::vec::Vec<LvsWarning>,
}
/// An error discovered while comparing a netlist with a layout.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LvsError {
    /// Description of the error.
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
}
/// A warning discovered while comparing a netlist with a layout.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LvsWarning {
    /// Description of the warning.
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
}
/// The tool to use to perform LVS.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LvsTool {
    /// The default, if no other LVS tool is specified.
    /// Passing this to EdaTool is likely to result in
    /// errors or crashes.
    Unspecified = 0,
    /// Use a tool not explicitly supported by the EdaTool API.
    /// Users are responsible for providing their own EdaTool plugin.
    Other = 1,
    /// Extract a layout netlist using magic,
    /// then compare the extracted netlist with the
    /// provided netlist using netgen.
    MagicNetgen = 2,
    /// Perform a comparison using Mentor Graphics Calibre.
    /// This is a proprietary tool. Users must have a license
    /// and access to the EdaTool Calibre plugin before using
    /// this option.
    Calibre = 3,
}
